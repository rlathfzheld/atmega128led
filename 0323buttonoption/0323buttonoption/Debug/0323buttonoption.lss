
0323buttonoption.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000023e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a6d  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082d  00000000  00000000  00000d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a6  00000000  00000000  0000156a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000409  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022a  00000000  00000000  00001d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001f67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	8d c0       	rjmp	.+282    	; 0x1c6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
int button_flag1;

int main(void)
{
	int t;
	DDRA=0xFF;   // for LEDs
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a bb       	out	0x1a, r24	; 26
	DDRF=0x00;	 // for Pull-up button,PF0
  b2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF=0xFF;  // Pull-up Start
  b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
//	char Temp=0x00;
	PORTA=0x00;
  ba:	1b ba       	out	0x1b, r1	; 27
	while(1)		// LED test
	{
		for(int i=0;i<8;i++)
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	11 c0       	rjmp	.+34     	; 0xe4 <main+0x36>
		{
			PORTA=(PORTA<<1)|0x01;
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	4f ef       	ldi	r20, 0xFF	; 255
  d0:	81 ee       	ldi	r24, 0xE1	; 225
  d2:	94 e0       	ldi	r25, 0x04	; 4
  d4:	41 50       	subi	r20, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x26>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x30>
  de:	00 00       	nop
	PORTF=0xFF;  // Pull-up Start
//	char Temp=0x00;
	PORTA=0x00;
	while(1)		// LED test
	{
		for(int i=0;i<8;i++)
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	28 30       	cpi	r18, 0x08	; 8
  e6:	31 05       	cpc	r19, r1
  e8:	64 f3       	brlt	.-40     	; 0xc2 <main+0x14>
			PORTA=(PORTA<<1)|0x01;
			//Temp=(Temp<<1)|0x01;
			//PORTA=Temp;
			_delay_ms(100);
		}
		PORTA = 0x00;
  ea:	1b ba       	out	0x1b, r1	; 27
		for(int i=0;i<8;i++)
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	0f c0       	rjmp	.+30     	; 0x110 <main+0x62>
		{
			PORTA=(PORTA>>1)|0x80;
  f2:	8b b3       	in	r24, 0x1b	; 27
  f4:	86 95       	lsr	r24
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	8b bb       	out	0x1b, r24	; 27
  fa:	ef ef       	ldi	r30, 0xFF	; 255
  fc:	f1 ee       	ldi	r31, 0xE1	; 225
  fe:	44 e0       	ldi	r20, 0x04	; 4
 100:	e1 50       	subi	r30, 0x01	; 1
 102:	f0 40       	sbci	r31, 0x00	; 0
 104:	40 40       	sbci	r20, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x52>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x5c>
 10a:	00 00       	nop
			//Temp=(Temp<<1)|0x01;
			//PORTA=Temp;
			_delay_ms(100);
		}
		PORTA = 0x00;
		for(int i=0;i<8;i++)
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
 110:	28 30       	cpi	r18, 0x08	; 8
 112:	31 05       	cpc	r19, r1
 114:	74 f3       	brlt	.-36     	; 0xf2 <main+0x44>
//		Temp=(Temp<<1)|0x01;	// PORTA 사용
//		PORTA=Temp;
//		_delay_ms(500);

//		if(Temp == 0xFF)	// 왼쪽으로 스캔 추가하기
		if(PORTA == 0xFF)	// 왼쪽으로 스캔 추가하기
 116:	8b b3       	in	r24, 0x1b	; 27
 118:	8f 3f       	cpi	r24, 0xFF	; 255
 11a:	81 f6       	brne	.-96     	; 0xbc <main+0xe>
				{	
			PORTA=0x00;
 11c:	1b ba       	out	0x1b, r1	; 27
			break;
		}
	}
	

	button_flag1=0;
 11e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 122:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	while(!(~PINF & 0x01));		//버튼 누르면 빠져나감
 126:	00 99       	sbic	0x00, 0	; 0
 128:	fe cf       	rjmp	.-4      	; 0x126 <main+0x78>
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	99 ef       	ldi	r25, 0xF9	; 249
 12e:	e0 e0       	ldi	r30, 0x00	; 0
 130:	81 50       	subi	r24, 0x01	; 1
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e0 40       	sbci	r30, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x82>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x8c>
 13a:	00 00       	nop
		 일정시간 지연을 두고 버튼이 떼는 순간 동작하기 위하여 다음 문장을 추가
		 하면 보다 확실한 동작이 됨
	*/

	_delay_ms(20);			// debouncing time
	while(~PINF & 0x01);	// 스위치를 떼는 순간 동작됨 
 13c:	00 9b       	sbis	0x00, 0	; 0
 13e:	fe cf       	rjmp	.-4      	; 0x13c <main+0x8e>

	 while(1){
		 if(!(PINF&0x01)){
 140:	00 99       	sbic	0x00, 0	; 0
 142:	fe cf       	rjmp	.-4      	; 0x140 <main+0x92>
			 PORTA=0B00001001;         // LED 1개 ON
 144:	89 e0       	ldi	r24, 0x09	; 9
 146:	8b bb       	out	0x1b, r24	; 27
 148:	ff ef       	ldi	r31, 0xFF	; 255
 14a:	20 e7       	ldi	r18, 0x70	; 112
 14c:	42 e0       	ldi	r20, 0x02	; 2
 14e:	f1 50       	subi	r31, 0x01	; 1
 150:	20 40       	sbci	r18, 0x00	; 0
 152:	40 40       	sbci	r20, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0xa0>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0xaa>
 158:	00 00       	nop
			 _delay_ms(50);             // 키를 누를 때의 채터링 방지용 딜레이
			 t=0;
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
			 while(t<1500){             // 1.5초 체크
 15e:	09 c0       	rjmp	.+18     	; 0x172 <main+0xc4>
 160:	ef e9       	ldi	r30, 0x9F	; 159
 162:	ff e0       	ldi	r31, 0x0F	; 15
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0xb6>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0xbc>
 16a:	00 00       	nop
				 _delay_ms(1); t++;
 16c:	01 96       	adiw	r24, 0x01	; 1
				 if(PINF&0x01)break;    // 중간에 스위치에서 손을 떼면 빠져나감
 16e:	00 99       	sbic	0x00, 0	; 0
 170:	04 c0       	rjmp	.+8      	; 0x17a <main+0xcc>
	 while(1){
		 if(!(PINF&0x01)){
			 PORTA=0B00001001;         // LED 1개 ON
			 _delay_ms(50);             // 키를 누를 때의 채터링 방지용 딜레이
			 t=0;
			 while(t<1500){             // 1.5초 체크
 172:	8c 3d       	cpi	r24, 0xDC	; 220
 174:	f5 e0       	ldi	r31, 0x05	; 5
 176:	9f 07       	cpc	r25, r31
 178:	9c f3       	brlt	.-26     	; 0x160 <main+0xb2>
				 _delay_ms(1); t++;
				 if(PINF&0x01)break;    // 중간에 스위치에서 손을 떼면 빠져나감
			 }
			 if(t>=1500){ 
 17a:	8c 3d       	cpi	r24, 0xDC	; 220
 17c:	95 40       	sbci	r25, 0x05	; 5
 17e:	64 f0       	brlt	.+24     	; 0x198 <main+0xea>
				 PORTA=0xFF; 
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	8b bb       	out	0x1b, r24	; 27
 184:	4f ef       	ldi	r20, 0xFF	; 255
 186:	89 e6       	ldi	r24, 0x69	; 105
 188:	98 e1       	ldi	r25, 0x18	; 24
 18a:	41 50       	subi	r20, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0xdc>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0xe6>
 194:	00 00       	nop
 196:	0b c0       	rjmp	.+22     	; 0x1ae <main+0x100>
				 _delay_ms(500);
				 } // LED 8개 ON // 길게 누른 경우
			 else       { 
				 PORTA=0x0F; 
 198:	8f e0       	ldi	r24, 0x0F	; 15
 19a:	8b bb       	out	0x1b, r24	; 27
 19c:	ef ef       	ldi	r30, 0xFF	; 255
 19e:	f9 e6       	ldi	r31, 0x69	; 105
 1a0:	28 e1       	ldi	r18, 0x18	; 24
 1a2:	e1 50       	subi	r30, 0x01	; 1
 1a4:	f0 40       	sbci	r31, 0x00	; 0
 1a6:	20 40       	sbci	r18, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <main+0xf4>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0xfe>
 1ac:	00 00       	nop
				  _delay_ms(500);
				  } // LED 4개 ON // 짧게 누른 경우
			 while(!(PINE&0x01));       // 아직도 키를 누르고 있다면 뗄 때까지 대기
 1ae:	08 9b       	sbis	0x01, 0	; 1
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <main+0x100>
 1b2:	4f ef       	ldi	r20, 0xFF	; 255
 1b4:	80 e7       	ldi	r24, 0x70	; 112
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	41 50       	subi	r20, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x10a>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x114>
 1c2:	00 00       	nop
 1c4:	bd cf       	rjmp	.-134    	; 0x140 <main+0x92>

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
