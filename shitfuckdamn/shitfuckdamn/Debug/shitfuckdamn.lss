
shitfuckdamn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000300  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  000003a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000efe  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ef  00000000  00000000  00001396  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063f  00000000  00000000  00001c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  000022c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000501  00000000  00000000  00002414  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000062a  00000000  00000000  00002915  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002f3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	d1 c0       	rjmp	.+418    	; 0x1b8 <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fe d0       	rcall	.+508    	; 0x2c0 <main>
  c4:	1b c1       	rjmp	.+566    	; 0x2fc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_busy>:
unsigned cmd;
	
	cmd = 0b00010000;
	if (SC == 1) cmd = cmd | 0b00001000;
	if (RL == 1) cmd = cmd | 0b00000100;
	lcd_command(cmd);
  c8:	11 ba       	out	0x11, r1	; 17
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	86 7f       	andi	r24, 0xF6	; 246
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	85 b3       	in	r24, 0x15	; 21
  d2:	82 6f       	ori	r24, 0xF2	; 242
  d4:	85 bb       	out	0x15, r24	; 21
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	84 6f       	ori	r24, 0xF4	; 244
  da:	85 bb       	out	0x15, r24	; 21
  dc:	87 99       	sbic	0x10, 7	; 16
  de:	f5 cf       	rjmp	.-22     	; 0xca <lcd_busy+0x2>
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	81 bb       	out	0x11, r24	; 17
  e4:	87 e8       	ldi	r24, 0x87	; 135
  e6:	93 e1       	ldi	r25, 0x13	; 19
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_busy+0x20>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_busy+0x26>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <lcd_command>:
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
  f6:	e8 df       	rcall	.-48     	; 0xc8 <lcd_busy>
  f8:	c2 bb       	out	0x12, r28	; 18
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	86 7f       	andi	r24, 0xF6	; 246
  fe:	85 bb       	out	0x15, r24	; 21
 100:	85 b3       	in	r24, 0x15	; 21
 102:	85 7f       	andi	r24, 0xF5	; 245
 104:	85 bb       	out	0x15, r24	; 21
 106:	85 b3       	in	r24, 0x15	; 21
 108:	84 6f       	ori	r24, 0xF4	; 244
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	85 b3       	in	r24, 0x15	; 21
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	85 bb       	out	0x15, r24	; 21
 112:	8d ee       	ldi	r24, 0xED	; 237
 114:	92 e0       	ldi	r25, 0x02	; 2
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_command+0x24>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_command+0x2a>
 11c:	00 00       	nop
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <lcd_data>:
 122:	cf 93       	push	r28
 124:	c8 2f       	mov	r28, r24
 126:	d0 df       	rcall	.-96     	; 0xc8 <lcd_busy>
 128:	85 b3       	in	r24, 0x15	; 21
 12a:	81 6f       	ori	r24, 0xF1	; 241
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	85 7f       	andi	r24, 0xF5	; 245
 132:	85 bb       	out	0x15, r24	; 21
 134:	85 b3       	in	r24, 0x15	; 21
 136:	84 6f       	ori	r24, 0xF4	; 244
 138:	85 bb       	out	0x15, r24	; 21
 13a:	80 e1       	ldi	r24, 0x10	; 16
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_data+0x1a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_data+0x20>
 142:	c2 bb       	out	0x12, r28	; 18
 144:	90 e1       	ldi	r25, 0x10	; 16
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_data+0x24>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_data+0x2a>
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	83 7f       	andi	r24, 0xF3	; 243
 150:	85 bb       	out	0x15, r24	; 21
 152:	8d ee       	ldi	r24, 0xED	; 237
 154:	92 e0       	ldi	r25, 0x02	; 2
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_data+0x34>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_data+0x3a>
 15c:	00 00       	nop
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <lcd_string>:
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	8c 01       	movw	r16, r24
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	f8 01       	movw	r30, r16
 172:	ec 0f       	add	r30, r28
 174:	fd 1f       	adc	r31, r29
 176:	80 81       	ld	r24, Z
 178:	88 23       	and	r24, r24
 17a:	19 f0       	breq	.+6      	; 0x182 <lcd_string+0x20>
 17c:	21 96       	adiw	r28, 0x01	; 1
 17e:	d1 df       	rcall	.-94     	; 0x122 <lcd_data>
 180:	f7 cf       	rjmp	.-18     	; 0x170 <lcd_string+0xe>
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret

0000018c <lcd_display_clear>:
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	b1 cf       	rjmp	.-158    	; 0xf2 <lcd_command>
 190:	08 95       	ret

00000192 <lcd_display_position>:

void lcd_display_position(unsigned char row, unsigned char col)
{
unsigned cmd;

	cmd = 0b10000000 | ((row-1)*0x40+(col-1));
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	00 24       	eor	r0, r0
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	07 94       	ror	r0
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	07 94       	ror	r0
 1a4:	98 2f       	mov	r25, r24
 1a6:	80 2d       	mov	r24, r0
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	61 50       	subi	r22, 0x01	; 1
 1ac:	71 09       	sbc	r23, r1
 1ae:	86 0f       	add	r24, r22
 1b0:	97 1f       	adc	r25, r23
	lcd_command(cmd);
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	9e cf       	rjmp	.-196    	; 0xf2 <lcd_command>
 1b6:	08 95       	ret

000001b8 <__vector_5>:
											//            1950uS  ---   +45도
											//            2400uS  ---   +90도


ISR(INT4_vect)		// 외부인터럽트로 방향설정하기-누를때마다 방향전환
{	
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	0b b6       	in	r0, 0x3b	; 59
 1c4:	0f 92       	push	r0
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
			SREG=0x00;
 1de:	1f be       	out	0x3f, r1	; 63
			pwm_seq=(tim0_cnt++)%5;	// tim0_cnt의 값을 증가하여 배열 8개중 값을 다음번값으로 이동시키기 위함.듀티비 조정용
 1e0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <tim0_cnt>
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	89 0f       	add	r24, r25
 1e8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <tim0_cnt>
 1ec:	8d ec       	ldi	r24, 0xCD	; 205
 1ee:	98 9f       	mul	r25, r24
 1f0:	81 2d       	mov	r24, r1
 1f2:	11 24       	eor	r1, r1
 1f4:	86 95       	lsr	r24
 1f6:	86 95       	lsr	r24
 1f8:	28 2f       	mov	r18, r24
 1fa:	22 0f       	add	r18, r18
 1fc:	22 0f       	add	r18, r18
 1fe:	82 0f       	add	r24, r18
 200:	98 1b       	sub	r25, r24
 202:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <__data_end>
			
			if (pwm_seq == 0){
 206:	91 11       	cpse	r25, r1
 208:	08 c0       	rjmp	.+16     	; 0x21a <__vector_5+0x62>
				lcd_display_clear();
 20a:	c0 df       	rcall	.-128    	; 0x18c <lcd_display_clear>
				lcd_display_position(1,1);
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	c0 df       	rcall	.-128    	; 0x192 <lcd_display_position>
				lcd_string("-90");
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	a5 df       	rcall	.-182    	; 0x162 <lcd_string>
 218:	27 c0       	rjmp	.+78     	; 0x268 <__vector_5+0xb0>
			}
			else if (pwm_seq == 1){
 21a:	91 30       	cpi	r25, 0x01	; 1
 21c:	41 f4       	brne	.+16     	; 0x22e <__vector_5+0x76>
				lcd_display_clear();
 21e:	b6 df       	rcall	.-148    	; 0x18c <lcd_display_clear>
				lcd_display_position(1,1);
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	b6 df       	rcall	.-148    	; 0x192 <lcd_display_position>
				lcd_string("-45");
 226:	8e e0       	ldi	r24, 0x0E	; 14
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	9b df       	rcall	.-202    	; 0x162 <lcd_string>
 22c:	1d c0       	rjmp	.+58     	; 0x268 <__vector_5+0xb0>
			}
			else if (pwm_seq == 2){
 22e:	92 30       	cpi	r25, 0x02	; 2
 230:	41 f4       	brne	.+16     	; 0x242 <__vector_5+0x8a>
				lcd_display_clear();
 232:	ac df       	rcall	.-168    	; 0x18c <lcd_display_clear>
				lcd_display_position(1,1);
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	ac df       	rcall	.-168    	; 0x192 <lcd_display_position>
				lcd_string("0");
 23a:	8c e0       	ldi	r24, 0x0C	; 12
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	91 df       	rcall	.-222    	; 0x162 <lcd_string>
 240:	13 c0       	rjmp	.+38     	; 0x268 <__vector_5+0xb0>
			}
			else if (pwm_seq == 3){
 242:	93 30       	cpi	r25, 0x03	; 3
 244:	41 f4       	brne	.+16     	; 0x256 <__vector_5+0x9e>
				lcd_display_clear();
 246:	a2 df       	rcall	.-188    	; 0x18c <lcd_display_clear>
				lcd_display_position(1,1);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	a2 df       	rcall	.-188    	; 0x192 <lcd_display_position>
				lcd_string("45");
 24e:	8f e0       	ldi	r24, 0x0F	; 15
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	87 df       	rcall	.-242    	; 0x162 <lcd_string>
 254:	09 c0       	rjmp	.+18     	; 0x268 <__vector_5+0xb0>
			}
			else if (pwm_seq == 4){
 256:	94 30       	cpi	r25, 0x04	; 4
 258:	39 f4       	brne	.+14     	; 0x268 <__vector_5+0xb0>
				lcd_display_clear();
 25a:	98 df       	rcall	.-208    	; 0x18c <lcd_display_clear>
 25c:	61 e0       	ldi	r22, 0x01	; 1
				lcd_display_position(1,1);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	98 df       	rcall	.-208    	; 0x192 <lcd_display_position>
 262:	8b e0       	ldi	r24, 0x0B	; 11
 264:	91 e0       	ldi	r25, 0x01	; 1
				lcd_string("90");
 266:	7d df       	rcall	.-262    	; 0x162 <lcd_string>
 268:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 26c:	f0 e0       	ldi	r31, 0x00	; 0
			}
			
			OCR1A=pwm_data[pwm_seq];		// 업카운팅 매치시0으로 다운카운팅시 1로 출력만듬. 
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	e0 50       	subi	r30, 0x00	; 0
 274:	ff 4f       	sbci	r31, 0xFF	; 255
 276:	80 81       	ld	r24, Z
 278:	91 81       	ldd	r25, Z+1	; 0x01
 27a:	9b bd       	out	0x2b, r25	; 43
 27c:	8a bd       	out	0x2a, r24	; 42
 27e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <tim0_cnt>
 282:	80 35       	cpi	r24, 0x50	; 80
			if(	tim0_cnt>=80)	tim0_cnt=0;	// 카운터 초기화
 284:	10 f0       	brcs	.+4      	; 0x28a <__vector_5+0xd2>
 286:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <tim0_cnt>
 28a:	87 e8       	ldi	r24, 0x87	; 135
 28c:	93 e1       	ldi	r25, 0x13	; 19
 28e:	01 97       	sbiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 290:	f1 f7       	brne	.-4      	; 0x28e <__vector_5+0xd6>
 292:	00 c0       	rjmp	.+0      	; 0x294 <__vector_5+0xdc>
 294:	00 00       	nop
 296:	80 e8       	ldi	r24, 0x80	; 128
 298:	8f bf       	out	0x3f, r24	; 63
 29a:	ff 91       	pop	r31
			_delay_ms(20);					// 버튼 채터링	
			SREG=0x80;	
 29c:	ef 91       	pop	r30
 29e:	bf 91       	pop	r27
			
}
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0b be       	out	0x3b, r0	; 59
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <main>:
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	84 bb       	out	0x14, r24	; 20
 2c4:	85 bb       	out	0x15, r24	; 21
	DDRC=0xff;				// Power 
	PORTC=0xff;				// +5V
/*
							Timer/Counter1
*/	
	DDRB=0b00100000;		// PB5 output direction for Timer/Counter1 signal 
 2c6:	80 e2       	ldi	r24, 0x20	; 32
 2c8:	87 bb       	out	0x17, r24	; 23
	TCCR1A=0b10000000;  	// com1a1 com1a0 = 1, 0 : clear OCnA on compare match  when up-counting.Set OC1A on compare match when downcounting(Phase and frequency
 2ca:	c0 e8       	ldi	r28, 0x80	; 128
 2cc:	cf bd       	out	0x2f, r28	; 47
							// com1c1 com1c0 = 0, 0 : Normal port,OCnC disconnected
							// WGM11 WGM10 =   0, 0  : Waveform Generation MOde지정, TCCR1B의 WGM13, WGM12비트와 연동하여 
							//						  동작모드 지정,즉 WGM13,WGM12,WGM11,WGM10의 4비트로 설정함으로 총16가지 설정가능 
							//						  WGM11,WGM10 =0 0 이므로 Fast PWM,10bit혹은 Fast PWM방식인데 아래의 TCCR1B 레지스터를 참조해야 함	

	TCCR1B=0b00010010;		// ICNC1,ICES1 =0 0;bit5는 사용 않고, WGM13,WGM12 =1 0; Mode 8,ICR1 =>top, TCNT1과 OCR1A는 비교매치시 0 또는 1로 토글
 2ce:	82 e1       	ldi	r24, 0x12	; 18
 2d0:	8e bd       	out	0x2e, r24	; 46
							// CS12, CS11,CS0 -clock source select; 010=clk(i/o) / 8 분주비 16MHz/8=2MHz, T=0.5uS

	ICR1=20000;				//분주비8로 클럭 2MHz를 사용하여 20mS을 만들기위해서는 0.5uS * 40,000 =20mS.즉 클럭40,000개면 20mS주기를 만들수 있다.하지만
 2d2:	80 e2       	ldi	r24, 0x20	; 32
 2d4:	9e e4       	ldi	r25, 0x4E	; 78
 2d6:	97 bd       	out	0x27, r25	; 39
 2d8:	86 bd       	out	0x26, r24	; 38
							//모드8에서는 카운터가 업-다운중에 비교매치가 발생함으로 40,000/2=20,000으로 해야함.
							//업카운팅 매치시0으로 다운카운팅시 1로 출력만듬. 

	OCR1A=600;				// initial value, 0 degree
 2da:	88 e5       	ldi	r24, 0x58	; 88
 2dc:	92 e0       	ldi	r25, 0x02	; 2
 2de:	9b bd       	out	0x2b, r25	; 43
 2e0:	8a bd       	out	0x2a, r24	; 42
//
	//TCCR0=0b00000111;		// Normal Mode, Prescaler 1024, Upcounting only
	//TCNT0=0x00;				// initial value

//	외부인터럽트 입력버튼용 PE4번 이용하고 내부풀업저항 사용함
	DDRE=0x00;
 2e2:	12 b8       	out	0x02, r1	; 2
	PORTE=0xf0;
 2e4:	80 ef       	ldi	r24, 0xF0	; 240
 2e6:	83 b9       	out	0x03, r24	; 3

	EIMSK=0b11110000;		//외부인터럽트 PE4-7사용
 2e8:	89 bf       	out	0x39, r24	; 57
	EICRB=0b10101010;		// 하강엣지에서 동작
 2ea:	8a ea       	ldi	r24, 0xAA	; 170
 2ec:	8a bf       	out	0x3a, r24	; 58

//	TIMSK=0x01;				// Timer0 Overflow on compare match,타이머로 자동으로 방향전환시에는 동작시켜줌
	lcd_display_clear();
 2ee:	4e df       	rcall	.-356    	; 0x18c <lcd_display_clear>
	tim0_cnt=0;				
 2f0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <tim0_cnt>

	pwm_seq=0;				// PWM Waveform 종류 지정용 인덱스
 2f4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	SREG=0x80;				// asm "sei()"; 전역인잍터럽트 1 
 2f8:	cf bf       	out	0x3f, r28	; 63
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <main+0x3a>

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
