
for8led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009af  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000836  00000000  00000000  00000c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000359  00000000  00000000  00001489  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000017e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f7  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000160  00000000  00000000  00001bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001d5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	78 c0       	rjmp	.+240    	; 0x19c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:

int button_flag1;

int main(void)
{
	DDRA=0xFF;   // for LEDs
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a bb       	out	0x1a, r24	; 26
	DDRF=0x00;	 // for Pull-up button,PF0
  b2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF=0xFF;  // Pull-up Start
  b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
//	char Temp=0x00;
	PORTA=0x00;
  ba:	1b ba       	out	0x1b, r1	; 27
	while(1)		// LED test
	{
		PORTA=(PORTA<<1)|0x01;	// PORTA 사용
  bc:	8b b3       	in	r24, 0x1b	; 27
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	49 e6       	ldi	r20, 0x69	; 105
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	40 40       	sbci	r20, 0x00	; 0
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x20>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x2a>
  d8:	00 00       	nop
//		Temp=(Temp<<1)|0x01;	// PORTA 사용
//		PORTA=Temp;
		_delay_ms(500);

//		if(Temp == 0xFF)	// 왼쪽으로 스캔 추가하기
		if(PORTA == 0xFF)	// 왼쪽으로 스캔 추가하기
  da:	8b b3       	in	r24, 0x1b	; 27
  dc:	8f 3f       	cpi	r24, 0xFF	; 255
  de:	71 f7       	brne	.-36     	; 0xbc <main+0xe>
				{	
			PORTA=0x00;
  e0:	1b ba       	out	0x1b, r1	; 27
			break;
		}
	}
	

	button_flag1=0;
  e2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	while(!(~PINF & 0x01));		//버튼 누르면 빠져나감
  ea:	00 99       	sbic	0x00, 0	; 0
  ec:	fe cf       	rjmp	.-4      	; 0xea <main+0x3c>
  ee:	9f ef       	ldi	r25, 0xFF	; 255
  f0:	29 ef       	ldi	r18, 0xF9	; 249
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	91 50       	subi	r25, 0x01	; 1
  f6:	20 40       	sbci	r18, 0x00	; 0
  f8:	40 40       	sbci	r20, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x46>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x50>
  fe:	00 00       	nop
		 일정시간 지연을 두고 버튼이 떼는 순간 동작하기 위하여 다음 문장을 추가
		 하면 보다 확실한 동작이 됨
	*/

	_delay_ms(20);			// debouncing time
	while(~PINF & 0x01);	// 스위치를 떼는 순간 동작됨 
 100:	00 9b       	sbis	0x00, 0	; 0
 102:	fe cf       	rjmp	.-4      	; 0x100 <main+0x52>

	while(1)
	{
	  
		// 동작 토글용 검사
		if(button_flag1 == 0)			//Led_On (8 -->1) 시작
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	89 2b       	or	r24, r25
 10e:	99 f0       	breq	.+38     	; 0x136 <main+0x88>
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	27 c0       	rjmp	.+78     	; 0x164 <main+0xb6>
		{

			for(int i=0;i<8;i++)
			{
				PORTA=(PORTA>>1)|0x80;
 116:	8b b3       	in	r24, 0x1b	; 27
 118:	86 95       	lsr	r24
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8b bb       	out	0x1b, r24	; 27
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	95 ea       	ldi	r25, 0xA5	; 165
 122:	4e e0       	ldi	r20, 0x0E	; 14
 124:	81 50       	subi	r24, 0x01	; 1
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	40 40       	sbci	r20, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x76>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x80>
 12e:	00 00       	nop
	  
		// 동작 토글용 검사
		if(button_flag1 == 0)			//Led_On (8 -->1) 시작
		{

			for(int i=0;i<8;i++)
 130:	2f 5f       	subi	r18, 0xFF	; 255
 132:	3f 4f       	sbci	r19, 0xFF	; 255
 134:	02 c0       	rjmp	.+4      	; 0x13a <main+0x8c>
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	28 30       	cpi	r18, 0x08	; 8
 13c:	31 05       	cpc	r19, r1
 13e:	5c f3       	brlt	.-42     	; 0x116 <main+0x68>
 140:	14 c0       	rjmp	.+40     	; 0x16a <main+0xbc>
		}
		else
	    {
			for(int i=0;i<8;i++)
			{
				PORTA=(PORTA<<1)|0x01;
 142:	8b b3       	in	r24, 0x1b	; 27
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	8b bb       	out	0x1b, r24	; 27
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	93 ec       	ldi	r25, 0xC3	; 195
 152:	49 e0       	ldi	r20, 0x09	; 9
 154:	81 50       	subi	r24, 0x01	; 1
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	40 40       	sbci	r20, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0xa6>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0xb0>
 15e:	00 00       	nop
			}
			
		}
		else
	    {
			for(int i=0;i<8;i++)
 160:	2f 5f       	subi	r18, 0xFF	; 255
 162:	3f 4f       	sbci	r19, 0xFF	; 255
 164:	28 30       	cpi	r18, 0x08	; 8
 166:	31 05       	cpc	r19, r1
 168:	64 f3       	brlt	.-40     	; 0x142 <main+0x94>
				_delay_ms(200);
			}
			
	    }
			
		while(!(~PINF & 0x01));		//버튼 누르면 빠져나감		
 16a:	00 99       	sbic	0x00, 0	; 0
 16c:	fe cf       	rjmp	.-4      	; 0x16a <main+0xbc>
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	99 ef       	ldi	r25, 0xF9	; 249
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	81 50       	subi	r24, 0x01	; 1
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	20 40       	sbci	r18, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0xc6>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xd0>
 17e:	00 00       	nop
			 _delay_ms(20);
			 PORTA=0x00;
 180:	1b ba       	out	0x1b, r1	; 27
//			 Temp=0x00;
			button_flag1=~button_flag1;	
 182:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 186:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18a:	80 95       	com	r24
 18c:	90 95       	com	r25
 18e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
		while(~PINF & 0x01);		//스위치를 떼는 순간 동작됨
 196:	00 9b       	sbis	0x00, 0	; 0
 198:	fe cf       	rjmp	.-4      	; 0x196 <main+0xe8>
 19a:	b4 cf       	rjmp	.-152    	; 0x104 <main+0x56>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
